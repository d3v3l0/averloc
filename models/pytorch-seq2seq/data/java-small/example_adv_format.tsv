src	tgt	src_adv1	src_adv2	src_adv3
( Class < ? > writable Class , String name ) { NAME TO CLASS . put ( name , writable Class ) ; }	add name	( Class < ? > writable Class , String name ) { N	AME TO CLASS . put ( name , writable Class ) ; }	( Class < ? > writable Class , String name ) { NAME TO CLASS . p
( Job ID arg0 ) throws IO Exception , Interrupted Exception { return client Cache . get Client ( arg0 ) . get Job Counters ( arg0 ) ; }	get job counters	( Job ID arg0 ) throws IO Exception , Interrupted Exception { retur	n client Cache . get Client ( arg0 ) . get Job Counters ( arg0 ) ; }	( Job ID arg0 ) throws IO Exception , Interrupted Exception { return client Cache . get Cl
( Data Input in ) throws IO Exception { int length = in . read Int ( ) ; if ( length != ( - 1 ) ) { skip Fully ( in , length ) ; } }	skip compressed byte array	( Data Input in ) throws IO Exception { int length = in . read Int	 ( ) ; if ( length != ( - 1 ) ) { skip Fully ( in , length ) ; } }	( Data Input in ) throws IO Exception { int length = in . read Int ( ) ; if ( length != 
( Job ID job Id , String job Submit Dir , Credentials ts ) throws IO Exception , Interrupted Exception { add History Token ( ts ) ; // Construct necessary information to start the MR AM Application Submission Context app Context = create Application Submission Context ( conf , job Submit Dir , ts ) ; // Submit to Resource Manager try { Application Id application Id = res Mgr Delegate . submit Application ( app Context ) ; Application Report app Master = res Mgr Delegate . get Application Report ( application Id ) ; String diagnostics = ( app Master == null ) ? "application report is null" : app Master . get Diagnostics ( ) ; if ( ( ( app Master == null ) || ( app Master . get Yarn Application State ( ) == Yarn Application State . FAILED ) ) || ( app Master . get Yarn Application State ( ) == Yarn Application State . KILLED ) ) { throw new IO Exception ( " Failed to run job : " + diagnostics ) ; } return client Cache . get Client ( job Id ) . get Job Status ( job Id ) ; } catch ( Yarn Exception e ) { throw new IO Exception ( e ) ; } }	submit job	( Job ID job Id , String job Submit Dir , Credentials ts ) throws IO Exception , Interrupted Exception { add History Token ( ts ) ; // Construct necessary information to start the MR AM Application Submission Context app Context = create Application Submission Context ( conf , job Submit Dir , ts ) ; // Submit to Resource Manager try { Application Id application Id = res Mgr Delegate . submit Application ( app Context ) ; Application Report app Master = res Mgr Delegate . get Application Report ( application Id ) ; Str	ing diagnostics = ( app Master == null ) ? "application report is null" : app Master . get Diagnostics ( ) ; if ( ( ( app Master == null ) || ( app Master . get Yarn Application State ( ) == Yarn Application State . FAILED ) ) || ( app Master . get Yarn Application State ( ) == Yarn Application State . KILLED ) ) { throw new IO Exception ( " Failed to run job : " + diagnostics ) ; } return client Cache . get Client ( job Id ) . get Job Status ( job Id ) ; } catch ( Yarn Exception e ) { throw new IO Exception ( e ) ; } }	( Job ID job Id , String job Submit Dir , Credentials ts ) throws IO Exception , Interrupted Exception { add History Token ( ts ) ; // Construct necessary information to start the MR AM Application Submission Context app Context = create Application Submission Context ( conf , job Submit Dir , ts ) ; // Submit to Resource Manager try { Application Id application Id = res Mgr Delegate . submit Application ( app Context ) ; Application Report app Master = res Mgr Delegate . get Application Report ( application Id ) ; String diagnostics = ( app Master == null ) ? "application report is null" : app Master . get Diagnostics ( ) ; if ( ( ( app Master == null ) || ( app Master . get Yarn Applicati
( ) throws IO Exception { Inet Socket Address bind Addr = get Rpc Address To Bind To ( ) ; rpc Server = new ZKFC Rpc Server ( conf , bind Addr , this , get Policy Provider ( ) ) ; }	init rpc	( ) throws IO Exception { Inet Socket Address bind Addr = get Rpc Address To Bind To ( ) ;	 rpc Server = new ZKFC Rpc Server ( conf , bind Addr , this , get Policy Provider ( ) ) ; }	( ) throws IO Exception { Inet Socket Address bind Addr = get Rpc Address To Bind To ( ) ; rpc Server = new ZKFC Rpc Ser
( DFS Client client , File Handle file Handle , Id User Group iug ) throws IO Exception { String file Id Path = Nfs3 Utils . get File Id Path ( file Handle ) ; Nfs3 File Attributes attr = Nfs3 Utils . get File Attr ( client , file Id Path , iug ) ; if ( attr != null ) { Open File Ctx open File Ctx = file Context Cache . get ( file Handle ) ; if ( open File Ctx != null ) { attr . set Size ( open File Ctx . get Next Offset ( ) ) ; attr . set Used ( open File Ctx . get Next Offset ( ) ) ; } } return attr ; }	get file attr	( DFS Client client , File Handle file Handle , Id User Group iug ) throws IO Exception { String file Id Path = Nfs3 Utils . get File Id Path ( file Handle ) ; Nfs3 File Attributes attr = Nfs3 Utils . get File Attr ( client , file Id Path , iug ) ; if ( a	ttr != null ) { Open File Ctx open File Ctx = file Context Cache . get ( file Handle ) ; if ( open File Ctx != null ) { attr . set Size ( open File Ctx . get Next Offset ( ) ) ; attr . set Used ( open File Ctx . get Next Offset ( ) ) ; } } return attr ; }	( DFS Client client , File Handle file Handle , Id User Group iug ) throws IO Exception { String file Id Path = Nfs3 Utils . get File Id Path ( file Handle ) ; Nfs3 File Attributes attr = Nfs3 Utils . get File Attr ( client , file Id Path , iug ) ; if ( attr != null ) { Open File Ctx open File Ctx = file Context Cache . get ( file Handle 
( FS Edit Log Op op ) throws IO Exception { try { op . output To Xml ( content Handler ) ; } catch ( SAX Exception e ) { throw new IO Exception ( " SAX error: " + e . get Message ( ) ) ; } }	visit op	( FS Edit Log Op op ) throws IO Exception { try { op . output To Xml ( content Handler ) ; } ca	tch ( SAX Exception e ) { throw new IO Exception ( " SAX error: " + e . get Message ( ) ) ; } }	( FS Edit Log Op op ) throws IO Exception { try { op . output To Xml ( content Handler ) ; } catch ( SAX Exception e ) { throw
( ) { return ! empty ; }	has next	( ) { return	 ! empty ; }	( ) { return ! e
( byte [ ] b , int off , int len ) throws IO Exception { if ( b == null ) { throw new Null Pointer Exception ( ) ; } if ( ( ( off < 0 ) || ( len < 0 ) ) || ( off > ( b . length - len ) ) ) { throw new Array Index Out Of Bounds Exception ( ) ; } int n = 0 ; // Check if there is uncompressed data n = uncompressed Direct Buf . remaining ( ) ; if ( n > 0 ) { n = Math . min ( n , len ) ; ( ( Byte Buffer ) ( uncompressed Direct Buf ) ) . get ( b , off , n ) ; return n ; } // Re-initialize the zlib's output direct buffer uncompressed Direct Buf . rewind ( ) ; uncompressed Direct Buf . limit ( direct Buffer Size ) ; // Decompress data n = inflate Bytes Direct ( ) ; uncompressed Direct Buf . limit ( n ) ; // Get at most 'len' bytes n = Math . min ( n , len ) ; ( ( Byte Buffer ) ( uncompressed Direct Buf ) ) . get ( b , off , n ) ; return n ; }	decompress	( byte [ ] b , int off , int len ) throws IO Exception { if ( b == null ) { throw new Null Pointer Exception ( ) ; } if ( ( ( off < 0 ) || ( len < 0 ) ) || ( off > ( b . length - len ) ) ) { throw new Array Index Out Of Bounds Exception ( ) ; } int n = 0 ; // Check if there is uncompressed data n = uncompressed Direct Buf . remaining ( ) ; if ( n > 0 ) { n = Math . min ( n , len ) ; ( ( Byte Buffer ) ( uncompressed Dire	ct Buf ) ) . get ( b , off , n ) ; return n ; } // Re-initialize the zlib's output direct buffer uncompressed Direct Buf . rewind ( ) ; uncompressed Direct Buf . limit ( direct Buffer Size ) ; // Decompress data n = inflate Bytes Direct ( ) ; uncompressed Direct Buf . limit ( n ) ; // Get at most 'len' bytes n = Math . min ( n , len ) ; ( ( Byte Buffer ) ( uncompressed Direct Buf ) ) . get ( b , off , n ) ; return n ; }	( byte [ ] b , int off , int len ) throws IO Exception { if ( b == null ) { throw new Null Pointer Exception ( ) ; } if ( ( ( off < 0 ) || ( len < 0 ) ) || ( off > ( b . length - len ) ) ) { throw new Array Index Out Of Bounds Exception ( ) ; } int n = 0 ; // Check if there is uncompressed data n = uncompressed Direct Buf . remaining ( ) ; if ( n > 0 ) { n = Math . min ( n , len ) ; ( ( Byte Buffer ) ( uncompressed Direct Buf ) ) . get ( b , off , n ) ; return n ; } // Re-initialize the zlib's output direct buffer uncompressed Direct Buf . rewind ( ) ; uncom
